# Default values for analect-app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# --name is the github repository name of this application deploy
name: ""

# --cluster Set Cluster Name
cluster: cluster.local

# -- Network
network:
# --domain Set Default Domain
  domain: analect.com
  # --service An abstract way to expose an application running on a set of Pods as a network service.
  service:
    type: ClusterIP
  # --port is the port your application runs under
    port: 80

# --istioInjection enable istio injection
istioInjection:
  enabled: true

# --ingress Ingress exposes HTTP and HTTPS routes from outside the cluster to services within the cluster.
ingress:
  # -- enable ingress
  enabled: true

# --ServiceAccount A service account provides an identity for processes that run in a Pod, about more: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
ServiceAccount:
  # --Specifies whether a service account should be created
  enabled: true
  # --Annotations to add to the service account
  annotations: {}

# --PeerAuthentication defines how traffic will be tunneled (or not) to the sidecar.
peerAuthentication:
  # --enable PeerAuthentication
  enabled: true

# --autoscaling is the main object of autoscaling
autoscaling:
  # --enabled is the flag to sinalize this funcionality is enabled
  enabled: true
  # --minReplicas is the number of mim pods to be running
  minReplicas: 2
  # --maxReplicas is the number of maximum scaling pods
  maxReplicas: 4
  # --targetCPUUtilizationPercentage is the percentage of CPU utilization do Scaling
  targetCPUUtilizationPercentage: 70

container:
# --port is the port your application runs under
  port: 8080

  # --image is the object to specify the image to run in the deployment
image:
  # --repository: is the registry of your application ex:556684128444.dkr.ecr.us-east-1.amazonaws.com/YOU-APP-ECR-REPO-NAME
  # if empty this helm will auto generate the image using aws.registry/values.name:values.image.tag
  repository: ""
  # --pullPolicy is the prop to setup the behavior of pull police. options is: IfNotPresent \| allways
  pullPolicy: IfNotPresent
  # --especify the tag of your image to deploy
  tag: "latest"

imagePullSecrets:
  name: ghcr-secret

resources:
  requests:
    cpu: "50m"
    memory: "64Mi"
  limits:
    cpu: "100m"
    memory: "128Mi"

probe:
  enabled: true

livenessProbe:
  httpGet:
    path: /health-check/liveness
    port: 8080
  initialDelaySeconds: 15
  periodSeconds: 10

readinessProbe:
  httpGet:
    path: /health-check/readiness
    port: 8080
  initialDelaySeconds: 15
  periodSeconds: 10

nodeSelector: {}
tolerations: []
affinity: {}

env: []
  # examples:
  # please note that when the value is a number, you must quote the value to cast to string!
  # - name: ENVIROMENT
  #   value: dev

envFrom: []
  # examples:
  # please note that when the value is a number, you must quote the value to cast to string!
  # - configMapRef
  #     name: postgres-configs

sealedSecrets:
  enabled: true
  encryptedData: AgBgz4x/fWN2X0zvKx2OLyUYY8mlYtk0Ts18mROOHmT4rGWZK2pgdO7evsKCvxFaMvD7gzqgXEGu2fhExWF+XwijTD6nKRlSmwc9Odn9Xelo+xdppUn+lLiNseREQoXMUa/WHwPhsnZUUFLXyHFa72keoOqFsCKqtaEs8E+qnPfXcGBexV1NEIJfbJYJcUdHKNs/VzsQ6Cccr1odz6rlsDZn8NAi8FkPh0w7e4EELvhiqwZuTdzhXrNeNxemd2KmVAUZ+8rsJtpj1sp7qdVNnHDW6l+tGoDHnV88DBpoi9XuX54gddhYu15HeNagiwC6HPFs/aaWa/6FAIDcKgQWI7YKs4JrjNd0glpn3Nwh04fs6wLFD/hbjkn/S/ny0Kj/SS/tyX4eeDSNQlvHtcY6SlfJ3ujTw4hH0yj2cl0eJfFWxHpic6X5uxp3guhhDHZMtXNqlNyd4ezLMOO60AI0PKWByLUnQyql82xm5e2XJ/+xQp2rfDvezbcgGMbCfG3iJEfVTddj6nkE78TIFPleQrNGsXq0zgP34OwziT6PK97+DcXuJhl0grmPQQ8wB/beJ1ftpUdpdm38upPXVoEq8KNiTAvePZ3m5HUujDoHGi9h+giJpIAgYsqd7d2SHpGoGDts8GTo7z5EIwlzGCZvHNYg/09jT/Cl+J0tQGSwJgpYajjhWXEiiVKXxgZo3EfWA+i6O7mhjyvXPIOwNHRne6BAp0TbwSNkDXYr2GL+vMWurhvkTEqeWkRahpt/ACkGiLGGmdADh0t3X5ADSmWEKiy13b+Pfsif3HW8VwWtIHP+MNSSK3/Uj4baqhUKpGP2h0H2YEO939oHq3aeiKwCKJXRI5SfKFzO5Qxv90O94i2DB5lidE5hEL4EXAUcCQQ3mEmn4Wulb39XaL5m/vQMBg==

# --ResourceQuota provides constraints that limit aggregate resource consumption per namespace
argoRollouts:
  # --Specifies whether a resource quota should be created
  enabled: true
  revisionHistoryLimit: 5
  strategy:
    dynamicStableScale: true
    steps:
      - setWeight: 5
      - pause:
          duration: 10s
      - setWeight: 20
      - pause:
          duration: 10s
      - setWeight: 40
      - pause:
          duration: 10s
      - setWeight: 60
      - pause:
          duration: 10s
      - setWeight: 80
      - pause:
          duration: 10s

# --ResourceQuota provides constraints that limit aggregate resource consumption per namespace
quota:
  # --Specifies whether a resource quota should be created
  enabled: true
  resources:
    hard:
      requests.cpu: "1"
      requests.memory: 1Gi
      limits.cpu: "2"
      limits.memory: 2Gi

migration:
  # -- enable liquibase migration
  enabled: false