# Default values for analect-app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# --name is the github repository name of this application deploy
name: ""

# --cluster Set Cluster Name
cluster: cluster.local

# -- Network
network:
# --domain Set Default Domain
  domain: analect.com
  # --service An abstract way to expose an application running on a set of Pods as a network service.
  service:
    type: ClusterIP
  # --port is the port your application runs under
    port: 80

# --istioInjection enable istio injection
istioInjection:
  enabled: true

# --ingress Ingress exposes HTTP and HTTPS routes from outside the cluster to services within the cluster.
ingress:
  # -- enable ingress
  enabled: true

# --ServiceAccount A service account provides an identity for processes that run in a Pod, about more: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
ServiceAccount:
  # --Specifies whether a service account should be created
  enabled: true
  # --Annotations to add to the service account
  annotations: {}

# --PeerAuthentication defines how traffic will be tunneled (or not) to the sidecar.
peerAuthentication:
  # --enable PeerAuthentication
  enabled: true

# --autoscaling is the main object of autoscaling
autoscaling:
  # --enabled is the flag to sinalize this funcionality is enabled
  enabled: true
  # --minReplicas is the number of mim pods to be running
  minReplicas: 2
  # --maxReplicas is the number of maximum scaling pods
  maxReplicas: 4
  # --targetCPUUtilizationPercentage is the percentage of CPU utilization do Scaling
  targetCPUUtilizationPercentage: 70

container:
# --port is the port your application runs under
  port: 8080

  # --image is the object to specify the image to run in the deployment
image:
  # --repository: is the registry of your application ex:556684128444.dkr.ecr.us-east-1.amazonaws.com/YOU-APP-ECR-REPO-NAME
  # if empty this helm will auto generate the image using aws.registry/values.name:values.image.tag
  repository: ""
  # --pullPolicy is the prop to setup the behavior of pull police. options is: IfNotPresent \| allways
  pullPolicy: IfNotPresent
  # --especify the tag of your image to deploy
  tag: "latest"

imagePullSecrets:
  name: ghcr-secret

resources:
  requests:
    cpu: "50m"
    memory: "64Mi"
  limits:
    cpu: "100m"
    memory: "128Mi"

probe:
  enabled: true

livenessProbe:
  httpGet:
    path: /health-check/liveness
    port: 8080
  initialDelaySeconds: 15
  periodSeconds: 10

readinessProbe:
  httpGet:
    path: /health-check/readiness
    port: 8080
  initialDelaySeconds: 15
  periodSeconds: 10

nodeSelector: {}
tolerations: []
affinity: {}

env: []
  # examples:
  # please note that when the value is a number, you must quote the value to cast to string!
  # - name: ENVIROMENT
  #   value: dev

envFrom: []
  # examples:
  # please note that when the value is a number, you must quote the value to cast to string!
  # - configMapRef
  #     name: postgres-configs

sealedSecrets:
  enabled: true
  encryptedData: AgAD3JXWoNYTIoLXEYYyBchFBGj3eOvaOmOm5MThH7/mz9OoD1IwojloaTiD2tj+HxcRRq+N8N8FnixafAKsWB+2rFY3sBUZlVym/bcZZekw4ba/6pxE8x6gdnbKxeQgyqCPRp3R+XGgHm/1sH5ZFyKqCOOqO32gs8TXCQKUjPuT6oJA9WQbdasMxr7sdu/hXF6RsBNLebhT03mJl5GNcJn6Hy3rY4ZahvDckiCCziKLhl7ThLTDOlU5lD7HOO7sUXjqS69A2O/K4Uen6br4J/x7WyHMzY7YvPtqlDq9kVKtSls78BcNjxp1uwYynGoEV3WIKuwJZL47cV5L6caFvE/SQDt0kVfWLeMttLuAERCsvzG+SpxjKc2tL2zB3ExHO8cMcIRT/X5DM4Zoo9ZC1CF7kOw+YWYSUrvtUFlTxpklQXKi2m8x/mNWhtB3ZAUPfepz8e3Uvo4+cKgYQSehSWKlF6KcY5VSd72vKgSZJBLebfs5+hcrM7sg4+AphkeU2ek3pYRKEdDHnmU3LPSYobzEOCSiqy03uyZG+LiF7mnj1lt06hdZkzelqPmnHSMGJ1tWGzEi0QeRthaQ977zBDsqy8S+nfkH2RWBYaabLrEMFoiTPwbE+ejAt0MrJyLBTNiJP+lCgRGnWcU75bcRkHIRs0S69ytastuFuf05De6fvxIPd/ATy4AqPdAbFKzWpBgwJno+TUuy97ctc/jPTs1M6jwmxrMj8P87RZbxABv1TbAehCqfvUKyhK7vgOv//phe+Gp+JxqQ66zsqOxxN6Xp+4XkQwRCSGmmnr+eQrNEhkcfR+39beBIv89L9pF9dqKMx1LfjGmrOVgdVy8cOEaHe93Zr2bAGXCVY6dUOi0KpmAqWlYqHPT9C6XKhmzniRk4TTHJrEMmutKh2Y+oOg==

# --ResourceQuota provides constraints that limit aggregate resource consumption per namespace
argoRollouts:
  # --Specifies whether a resource quota should be created
  enabled: true
  revisionHistoryLimit: 5
  strategy:
    dynamicStableScale: true
    steps:
      - setWeight: 5
      - pause:
          duration: 10s
      - setWeight: 20
      - pause:
          duration: 10s
      - setWeight: 40
      - pause:
          duration: 10s
      - setWeight: 60
      - pause:
          duration: 10s
      - setWeight: 80
      - pause:
          duration: 10s

# --ResourceQuota provides constraints that limit aggregate resource consumption per namespace
quota:
  # --Specifies whether a resource quota should be created
  enabled: true
  resources:
    hard:
      requests.cpu: "1"
      requests.memory: 1Gi
      limits.cpu: "2"
      limits.memory: 2Gi

migration:
  # -- enable liquibase migration
  enabled: false